{"version":3,"file":"MapboxCluster.js","sources":["../../src/components/MapboxCluster.vue"],"sourcesContent":["<template>\n  <div :id=\"id\">\n    <mapbox-source\n      :id=\"sourceId\"\n      :options=\"source\" />\n    <mapbox-layer\n      :id=\"clustersLayer.id\"\n      :options=\"clustersLayer\"\n      @click=\"clustersClickHandler\"\n      @mouseenter=\"clustersMouseenterHandler\"\n      @mouseleave=\"clustersMouseleaveHandler\" />\n    <mapbox-layer\n      :id=\"clusterCountLayer.id\"\n      :options=\"clusterCountLayer\" />\n    <mapbox-layer\n      :id=\"unclusteredPointLayer.id\"\n      :options=\"unclusteredPointLayer\"\n      @click=\"unclusteredPointClickHandler\"\n      @mouseenter=\"unclusteredPointMouseenterHandler\"\n      @mouseleave=\"unclusteredPointMouseleaveHandler\" />\n  </div>\n</template>\n\n<script>\n  import uniqId from '../utils/uniq-id';\n  import { injectMap } from '../mixins/provide-inject-map';\n  import MapboxLayer from './MapboxLayer';\n  import MapboxSource from './MapboxSource';\n\n  export default {\n    name: 'MapboxCluster',\n    components: {\n      MapboxLayer,\n      MapboxSource,\n    },\n    mixins: [ injectMap() ],\n    props: {\n      /**\n       * The source of the data for the clustered points,\n       * must be a String or an Object of GeoJSON format.\n       * @type {String|GeoJSON}\n       */\n      data: {\n        type: [ String, Object ],\n        required: true,\n      },\n      /**\n       * The max zoom to cluster points on\n       * @type {Number}\n       */\n      clusterMaxZoom: {\n        type: Number,\n        default: 14,\n      },\n      /**\n       * Radius of each cluster when clustering point\n       * @type {Number}\n       */\n      clusterRadius: {\n        type: Number,\n        default: 50,\n      },\n      /**\n       * The layout configuration for the clusters circles\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      clustersLayout: {\n        type: Object,\n        default: () => ({}),\n      },\n      /**\n       * The paint configuration for the clusters circles\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      clustersPaint: {\n        type: Object,\n        default: () => ({\n          'circle-color': '#000',\n          'circle-radius': 40,\n        }),\n      },\n      /**\n       * The layout configuration for the clusters count\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      clusterCountLayout: {\n        type: Object,\n        default: () => ({\n          'text-field': [ 'get', 'point_count_abbreviated' ],\n        }),\n      },\n      /**\n       * The paint configuration for the clusters count\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      clusterCountPaint: {\n        type: Object,\n        default: () => ({\n          'text-color': 'white',\n        }),\n      },\n      /**\n       * The type of the unclustered points layer\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {String}\n       */\n      unclusteredPointLayerType: {\n        type: String,\n        default: 'circle',\n      },\n      /**\n       * The layout configuration for the unclustered points\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      unclusteredPointLayout: {\n        type: Object,\n        default: () => ({}),\n      },\n      /**\n       * The paint configuration for the unclustered points\n       * @see  https://docs.mapbox.com/mapbox-gl-js/example/cluster/\n       * @type {Object}\n       */\n      unclusteredPointPaint: {\n        type: Object,\n        default: () => ({\n          'circle-color': '#000',\n          'circle-radius': 4,\n        }),\n      },\n    },\n    data() {\n      return {\n        id: uniqId('mb-cluster-'),\n      };\n    },\n    computed: {\n      /**\n       * The source ID\n       * @type {String}\n       */\n      sourceId() {\n        return this.getId('source');\n      },\n      /**\n       * The source configuration\n       * @type {Object}\n       */\n      source() {\n        const { data, clusterMaxZoom, clusterRadius } = this.$props;\n        return {\n          type: 'geojson',\n          cluster: true,\n          data,\n          clusterMaxZoom,\n          clusterRadius,\n        };\n      },\n      /**\n       * The clusters layer configuration\n       * @type {Object}\n       */\n      clustersLayer() {\n        return {\n          id: this.getId('clusters'),\n          type: 'circle',\n          source: this.sourceId,\n          filter: [ 'has', 'point_count' ],\n          layout: this.clustersLayout,\n          paint: this.clustersPaint,\n        };\n      },\n      /**\n       * The cluster count layer configuration\n       * @type {Object}\n       */\n      clusterCountLayer() {\n        return {\n          id: this.getId('cluster-count'),\n          type: 'symbol',\n          source: this.sourceId,\n          filter: [ 'has', 'point_count' ],\n          layout: this.clusterCountLayout,\n          paint: this.clusterCountPaint,\n        };\n      },\n      /**\n       * The unclustered points layer\n       * @type {Object}\n       */\n      unclusteredPointLayer() {\n        return {\n          id: this.getId('unclustered-point'),\n          type: this.unclusteredPointLayerType,\n          source: this.sourceId,\n          filter: [ '!', [ 'has', 'point_count' ]],\n          layout: this.unclusteredPointLayout,\n          paint: this.unclusteredPointPaint,\n        };\n      },\n    },\n    methods: {\n      /**\n       * Get a suffixed ID based on the instance ID\n       *\n       * @param  {String} suffix The suffix of the ID\n       * @return {String}        The formatted ID\n       */\n      getId(suffix) {\n        return `${this.id}-${suffix}`;\n      },\n      /**\n       * Click handler for the clusters layer to zoom on the clicked cluster\n       *\n       * @param  {Object} event The Mapbox click event's object\n       * @return {void}\n       */\n      clustersClickHandler(event) {\n        const feature = this.map.queryRenderedFeatures(event.point, {\n          layers: [ this.clustersLayer.id ],\n        })[0];\n        const { cluster_id: clusterId } = feature.properties;\n\n        // Emit a cluster click event\n        this.$emit('mb-cluster-click', clusterId, event);\n        this.map\n          .getSource(this.sourceId)\n          .getClusterExpansionZoom(clusterId, (err, zoom) => {\n            if (err) {\n              return;\n            }\n\n            this.map.easeTo({\n              center: feature.geometry.coordinates,\n              zoom,\n            });\n          });\n      },\n      /**\n       * Mouseenter handler for the clusters layer to set a pointer cursor\n       *\n       * @return {void}\n       */\n      clustersMouseenterHandler() {\n        this.map.getCanvas().style.cursor = 'pointer';\n      },\n      /**\n       * Mouseleave handler for the clusters layer to unset the pointer cursor\n       *\n       * @return {void}\n       */\n      clustersMouseleaveHandler() {\n        this.map.getCanvas().style.cursor = '';\n      },\n\n      /**\n       * Handler for the click event on a single feature, emits an event with\n       * the feature object and the original event object\n       *\n       * @param  {Object} event The Mapbox click event's object\n       * @return {void}\n       */\n      unclusteredPointClickHandler(event) {\n        const [ feature ] = event.features;\n        this.$emit('mb-feature-click', feature, event);\n      },\n      /**\n       * Handler for the mouseenter event on a single feature.\n       * Emits an event with the feature object and the original event as\n       * parameters, and sets the cursor style to pointer.\n       *\n       * @param  {Object} event The Mapbox mouseenter event's object\n       * @return {void}\n       */\n      unclusteredPointMouseenterHandler(event) {\n        const [ feature ] = event.features;\n        this.$emit('mb-feature-mouseenter', feature, event);\n        this.map.getCanvas().style.cursor = 'pointer';\n      },\n      /**\n       * Handler for the mouseleave event on a single feature.\n       * Emits an event with the original event object as parameter, and resets\n       * the cursor style to its default value.\n       *\n       * @param  {Object} event The Mapbox mouselvea eventâ€˜s object\n       * @return {void}\n       */\n      unclusteredPointMouseleaveHandler(event) {\n        this.$emit('mb-feature-mouseleave', event);\n        this.map.getCanvas().style.cursor = '';\n      },\n    },\n  };\n</script>\n"],"names":[],"mappings":";;;;;;;;AA6BA;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;;;;;;;AAMA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;AAYA;AACA;AACA;;;;;;;;;;;;;AAYA;AACA;AACA;;;;;;;;;;;;;AAYA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;CAtQA;;;AA3BA,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}