{"version":3,"file":"index.js","sources":["../../../src/components/StoreLocator/VueScroller.vue","../../../src/components/StoreLocator/StoreLocator.vue"],"sourcesContent":["<template>\n  <div\n    class=\"scroller\"\n    :class=\"{\n      'scroller--is-top': scrollTop === 0,\n      'scroller--is-bottom': scrollTop === scrollMax,\n      'scroller--has-no-scroll': scrollTop === 0 && scrollMax === 0,\n    }\">\n    <div ref=\"scroller\" class=\"scroller__inner\">\n      <div class=\"scroller__content\">\n        <!-- Use this slot to display the scroller content. -->\n        <slot />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        scrollTop: 0,\n        scrollMax: Infinity,\n      };\n    },\n    updated() {\n      this.setVars();\n    },\n    async mounted() {\n      this.$refs.scroller.addEventListener('scroll', this.setVars, { passive: true });\n\n      let timer;\n      this.debouncedSetVars = () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => this.setVars(), 300);\n        return timer;\n      };\n      window.addEventListener('resize', this.debouncedSetVars);\n\n      await this.$nextTick();\n      this.setVars();\n    },\n    beforeDestroy() {\n      this.$refs.scroller.removeEventListener('scroll', this.setVars);\n      window.removeEventListener('resize', this.debouncedSetVars);\n    },\n    methods: {\n      setVars() {\n        const { scroller } = this.$refs;\n        this.scrollTop = scroller.scrollTop;\n        this.scrollMax = scroller.scrollHeight - scroller.clientHeight;\n\n        if (this.scrollTop === 0) {\n          this.$emit('scroll-top');\n        }\n\n        if (this.scrollTop === this.scrollMax) {\n          this.$emit('scoll-bottom');\n        }\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\">\n  .scroller,\n  .scroller__inner {\n    width: 100%;\n    height: 100%;\n  }\n\n  .scroller {\n    position: relative;\n    overflow: hidden;\n\n    // Pseudo element\n    &::after,\n    &::before {\n      content: '';\n      z-index: 1;\n      position: absolute;\n      left: 0;\n      width: 100%;\n      height: 5em;\n      pointer-events: none;\n      border-radius: 30%;\n      box-shadow: 0 0 1em rgba(black, 0.25), 0 0 2em rgba(black, 0.05);\n      transition: opacity 1s cubic-bezier(0.19, 1, 0.22, 1);\n    }\n\n    &::before {\n      bottom: 100%;\n    }\n\n    &::after {\n      top: 100%;\n    }\n  }\n\n  .scroller--is-top,\n  .scroller--has-no-scroll {\n    &::before {\n      opacity: 0;\n    }\n  }\n\n  .scroller--is-bottom,\n  .scroller--has-no-scroll {\n    &::after {\n      opacity: 0;\n    }\n  }\n\n  .scroller__inner {\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n</style>\n","<template>\n  <div :class=\"classes.root || {}\">\n    <div :class=\"(classes.region || {}).map || {}\">\n      <template v-if=\"isLoading\">\n        <transition v-bind=\"(transitions.loader || {}).map || {}\">\n          <!-- @slot Use this slot to define a custom loader for the map region. -->\n          <slot name=\"map-loader\">\n            <transition\n              v-bind=\"(transitions.loader || {}).default || {}\">\n              <!-- @slot Use this slot to define a custom loader. -->\n              <slot name=\"loader\">\n                Loading...\n              </slot>\n            </transition>\n          </slot>\n        </transition>\n      </template>\n\n      <!-- @slot Use this slot to display information before the map. -->\n      <slot name=\"before-map\" />\n\n      <mapbox-map\n        :class=\"classes.map || {}\"\n        v-bind=\"{ ...mapboxMap, accessToken }\"\n        @mb-created=\"onMapCreated\"\n        @mb-movestart=\"onMapMovestart\"\n        @mb-moveend=\"onMapMoveend\"\n        @mb-load=\"onMapLoad\">\n        <mapbox-cluster\n          v-bind=\"{ ...mapboxCluster, data: geoJson }\"\n          @mb-feature-click=\"onClusterFeatureClick\" />\n        <!--\n          @slot Use this slot to add components from @studiometa/vue-mapbox-gl to the map.\n            @binding {Object} map The map instance.\n        -->\n        <slot name=\"map\" :map=\"map\" />\n      </mapbox-map>\n\n      <!-- @slot Use this slot to display information after the map. -->\n      <slot name=\"after-map\" />\n    </div>\n    <div :class=\"(classes.region || {}).search || {}\">\n      <template v-if=\"isLoading\">\n        <transition\n          v-bind=\"(transitions.loader || {}).search || {}\">\n          <!-- @slot Use this slot to define a custom loader for the search region. -->\n          <slot name=\"search-loader\">\n            <transition\n              v-bind=\"(transitions.loader || {}).default || {}\">\n              <!-- @slot Use this slot to define a custom loader. -->\n              <slot name=\"loader\">\n                Loading...\n              </slot>\n            </transition>\n          </slot>\n        </transition>\n      </template>\n\n      <!-- @slot Use this slot to display information before the search. -->\n      <slot name=\"before-search\" />\n\n      <mapbox-geocoder\n        :class=\"classes.search || {}\"\n        v-bind=\"{ ...mapboxGeocoder, accessToken }\"\n        @mb-result=\"onGeocoderResult\" />\n\n      <!-- @slot Use this slot to display information after the search. -->\n      <slot name=\"after-search\" />\n    </div>\n    <div :class=\"(classes.region || {}).list || {}\">\n      <template v-if=\"isLoading || listIsLoading\">\n        <transition\n          v-bind=\"(transitions.loader || {}).list || {}\">\n          <!-- @slot Use this slot to define a custom loader for the list region. -->\n          <slot name=\"list-loader\">\n            <transition\n              v-bind=\"(transitions.loader || {}).default || {}\">\n              <!-- @slot Use this slot to define a custom loader. -->\n              <slot name=\"loader\">\n                Loading...\n              </slot>\n            </transition>\n          </slot>\n        </transition>\n      </template>\n      <template v-else>\n        <!--\n          @slot Use this slot to display information before the list.\n            @binding {Array} items         The full list of items.\n            @binding {Array} filteredItems The filtered list of items.\n        -->\n        <slot name=\"before-list\" :items=\"items\" :filtered-items=\"filteredItems\">\n          <p>Result(s): {{ filteredItems.length.toFixed(0) }}</p>\n        </slot>\n\n        <vue-scroller v-if=\"filteredItems.length > 0\">\n          <ul :class=\"classes.list || {}\">\n            <li\n              v-for=\"(item, index) in filteredItems\"\n              :key=\"item.id\"\n              :class=\"classes.listItem || {}\"\n              @click=\"onListItemClick(item)\">\n              <!--\n                @slot Use this slot to customize the display of the list items.\n                  @binding {Object} item          An item.\n                  @binding {Object} selected-item The currently selected item.\n              -->\n              <slot name=\"list-item\" :item=\"item\" :index=\"index\" :selected-item=\"selectedItem\">\n                Lat: {{ item.lat }} <br>\n                Lng: {{ item.lng }}\n              </slot>\n            </li>\n          </ul>\n        </vue-scroller>\n\n        <!--\n          @slot Use this slot to display information after the list.\n            @binding {Array} items         The full list of items.\n            @binding {Array} filteredItems The filtered list of items.\n        -->\n        <slot name=\"after-list\" :items=\"items\" :filtered-items=\"filteredItems\" />\n      </template>\n    </div>\n    <div :class=\"(classes.region || {}).panel || {}\">\n      <transition v-bind=\"transitions.panel || {}\">\n        <div v-if=\"selectedItem\" :key=\"selectedItem.id\" :class=\"classes.panel || {}\">\n          <!--\n            @slot Use this slot to display content inside the panel.\n              @binding {Object}   item  The selected item.\n              @binging {Function} close A function to close the panel\n          -->\n          <slot name=\"panel\" :item=\"selectedItem\" :close=\"() => selectedItem = null\">\n            <div>{{ selectedItem }}</div>\n          </slot>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\n  import MapboxCluster from '../MapboxCluster';\n  import MapboxGeocoder from '../MapboxGeocoder';\n  import MapboxMap from '../MapboxMap';\n  import VueScroller from './VueScroller';\n\n  export default {\n    components: {\n      MapboxCluster,\n      MapboxGeocoder,\n      MapboxMap,\n      VueScroller,\n    },\n    props: {\n      /**\n       * A list of items to display.\n       * The only required properties are `lat` and `lng` and `id`.\n       *\n       * @type {Array<{ lat: Number, lng: number, id: string, [prop: string]: unknown }>}\n       */\n      items: {\n        type: Array,\n        required: true,\n      },\n      /**\n       * The zoom level to use when zooming in on an item.\n       *\n       * @type {Number}\n       */\n      itemZoomLevel: {\n        type: Number,\n        default: 14,\n      },\n      /**\n       * A Mapbox access token.\n       * @type {Object}\n       */\n      accessToken: {\n        type: String,\n        default: 'no-token',\n      },\n      /**\n       * Props for the MapboxMap component.\n       *\n       * @see  https://vue-mapbox-gl.meta.fr/components/MapboxMap.html#props\n       * @type {Object}\n       */\n      mapboxMap: {\n        type: Object,\n        default: () => ({}),\n      },\n      /**\n       * Props fof the MapboxCluster component.\n       *\n       * @see  https://vue-mapbox-gl.meta.fr/components/MapboxCluster.html#props\n       * @type {Object}\n       */\n      mapboxCluster: {\n        type: Object,\n        default: () => ({}),\n      },\n      /**\n       * Props for the MapboxGeocoder component.\n       *\n       * @see  https://vue-mapbox-gl.meta.fr/components/MapboxGeocoder.html#props\n       * @type {Object}\n       */\n      mapboxGeocoder: {\n        type: Object,\n        default: () => ({}),\n      },\n\n      /**\n       * Configuration for each transition component.\n       * @type {Object}\n       */\n      transitions: {\n        type: Object,\n        default: () => ({\n          loader: {\n            map: {},\n            search: {},\n            list: {},\n            default: {},\n          },\n          panel: {},\n        }),\n      },\n\n      /**\n       * Define custom classes for each element of the component.\n       * @type {Object}\n       */\n      classes: {\n        type: Object,\n        default: () => {\n          const root = 'store-locator';\n          const bem = (name, modifier = '') => `${root}__${name}${modifier ? `--${modifier}` : ''}`;\n          return {\n            root,\n            region: {\n              map: [ bem('region'), bem('region', 'map') ],\n              search: [ bem('region'), bem('region', 'search') ],\n              list: [ bem('region'), bem('region', 'list') ],\n              panel: [ bem('region'), bem('region', 'panel') ],\n            },\n            map: bem('map'),\n            search: bem('search'),\n            list: bem('list'),\n            listItem: bem('list-item'),\n            panel: bem('panel'),\n          };\n        },\n      },\n    },\n    data() {\n      return {\n        isLoading: true,\n        map: null,\n        mapIsMoving: false,\n        selectedItem: null,\n        filteredItems: this.items.map((item) => item),\n        listIsLoading: false,\n      };\n    },\n    computed: {\n      geoJson() {\n        return {\n          type: 'FeatureCollection',\n          features: this.items.map(({ lat, lng, ...properties }) => ({\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [ lng, lat ],\n            },\n            properties,\n          })),\n        };\n      },\n    },\n    methods: {\n      /**\n       * Handler for the geocoder result event.\n       *\n       * @param {Object} result The place selected in the geocoder component.\n       */\n      onGeocoderResult({ result }) {\n        if (result.bbox) {\n          this.map.fitBounds(result.bbox);\n        } else if (result.center) {\n          this.map.flyTo({ center: result.center });\n        }\n      },\n\n      /**\n       * Handler for the map created event.\n       *\n       * @param  {MapboxMap} instance The Mapbox instance.\n       */\n      async onMapCreated(instance) {\n        this.map = instance;\n        this.filterFeaturesInView();\n      },\n\n      /**\n       * Handler for the map load event.\n       */\n      async onMapLoad() {\n        await this.$nextTick();\n        this.isLoading = false;\n        this.$emit('load', this.map);\n      },\n\n      /**\n       * Handler for the map's movestart event.\n       */\n      onMapMovestart() {\n        this.mapIsMoving = true;\n        this.$nextTick(() => {\n          this.listIsLoading = true;\n        });\n      },\n\n      /**\n       * Handler for the map's moveend event.\n       */\n      onMapMoveend() {\n        this.mapIsMoving = false;\n        this.filterFeaturesInView();\n      },\n\n      /**\n       * Filter the features in view.\n       */\n      async filterFeaturesInView() {\n        const mapBounds = this.map.getBounds();\n        this.filteredItems = this.items.filter(({ lng, lat }) => mapBounds.contains([ lng, lat ]));\n        await this.$nextTick();\n        this.listIsLoading = false;\n      },\n\n      /**\n       * Handler for the click event on a list item.\n       * @param {Feature} store A GeoJSON feature.;\n       */\n      onListItemClick(item) {\n        this.selectedItem = item;\n        this.$emit('select-item', item);\n\n        const { lat, lng } = this.map.getCenter();\n\n        // Do not trigger flyTo if the map is almost already centered\n        if (Math.abs(lng - item.lng) > 0.0001 && Math.abs(lat - item.lat) > 0.0001) {\n          this.map.flyTo({ center: [ item.lng, item.lat ], zoom: this.itemZoomLevel });\n        }\n      },\n\n      /**\n       * Handler for the click event on a GeoJSON feature.\n       *\n       * @param  {Feature} feature The GeoJSON feature being clicked.\n       */\n      onClusterFeatureClick(feature) {\n        const item = this.items.find(({ id }) => id === feature.properties.id);\n\n        if (item) {\n          this.$emit('select-item', item);\n          this.selectedItem = item;\n          this.map.flyTo({ center: feature.geometry.coordinates, zoom: this.itemZoomLevel });\n        }\n      },\n    },\n  };\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;;;AAhBA,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgJA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AACA;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;AAeA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;;;;;;;;;;;AASA;AACA;;;;;;;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;CAvNA;;;AAhJA,+BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}